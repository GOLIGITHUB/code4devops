<h1 class="blog-title"> &#9755; Creating Rest API in Java Using Spring MVC</h1>
<p>in this blog, creating custom rest API. Rest API that means use Rest Controller <b>@RestController</b> on  
Configuration class. for the view, we use the <b> Postman tool </b>.
 where we testing our request and response generated by URL. Here showing the development process step by step.</p>
<table class="table table-hover">
	<tr>
		<th>HTTP Method</th>
		<th>Url Mapping</th>
		<th>CRUD Action</th>
	</tr>
	<tr>
		<td>POST</td>
		<td>customer/customersave</td>
		<td>Create a new customer</td>
	</tr>
	<tr>
		<td>GET</td>
		<td>customer/all-customer-list</td>
		<td>Read a list of customers</td>
	</tr>
	<tr>
		<td>GET</td>
		<td>customer/single-customer-view/{theCustomerId}</td>
		<td>Read a single customer</td>
	</tr>
	<tr>
		<td>PUT</td>
		<td>customer/update</td>
		<td>Update an exiting customer</td>
	</tr>
	<tr>
		<td>DELETE</td>
		<td>customer/delete/{theCustomerId}</td>
		<td>Delete an existing customer</td>
	</tr>
</table>
<!-- 
<h1>Rest customer api Development Process step by step</h1>
<ul>
	<li>Create Spring Boot project using STS</li>
	<li>Set Your POM.XML file</li>
	<li>Set up Database Dev Enviroment</li>
	<li>Add a new customer</li>
	<li>Get List of customers</li>
	<li>Get single customer ID</li>
	<li>Delete an exiting customer</li>
	<li>Update an exiting customer</li>
	
</ul>
 -->
 <p><b>Create Spring Boot project using STS</b></p>
<img src="${pageContext.request.contextPath}/static/img/blog/spring-boot-rest-controller-with-hibernate.jpg" />
<p><b>POM.XML</b></p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;2.3.0.RELEASE&lt;/version&gt;
		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
	&lt;/parent&gt;
	&lt;groupId&gt;com.code4devops&lt;/groupId&gt;
	&lt;artifactId&gt;SpringBootRestApiWithHibernate&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;name&gt;SpringBootRestApiWithHibernate&lt;/name&gt;
	&lt;description&gt;Spring Boot RestApi With Hibernate&lt;/description&gt;

	&lt;properties&gt;
		&lt;java.version&gt;1.8&lt;/java.version&gt;
	&lt;/properties&gt;

	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
			&lt;scope&gt;runtime&lt;/scope&gt;
			&lt;optional&gt;true&lt;/optional&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;mysql&lt;/groupId&gt;
			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
			&lt;scope&gt;runtime&lt;/scope&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
			&lt;scope&gt;test&lt;/scope&gt;
			&lt;exclusions&gt;
				&lt;exclusion&gt;
					&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;
					&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;
				&lt;/exclusion&gt;
			&lt;/exclusions&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;

&lt;/project&gt;

</pre>
<p><b>Note:</b> write some database information in  appliction.properties</p>
<p><b>appliction.properties</b></p>
<pre>
spring.datasource.url=jdbc:mysql://localhost:3306/spring_boot _build_a_rest_api_with_hibernate?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
</pre>

<p><b>Customer.java</b></p>
<pre>
package com.code4devops.entity;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import com.fasterxml.jackson.annotation.JsonFormat;

@Entity
@Table(name = "customer_detail")
public class Customer {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "customer_id", length = 10, nullable = false)
	private int customer_id;
	
	@Column(name = "customer_fname", length = 45, nullable = true)
	private String customer_fname;
	
	@Column(name = "customer_lname", length = 45, nullable = true)
	private String customer_lname;
	
	@Column(name = "customer_mobile", length = 45, nullable = true)
	private String customer_mobile;
	
	@Column(name = "customer_email", length = 45, nullable = true)
	private String customer_email;
	
	@Column(name = "customer_join_date", length = 45, nullable = true)
	@JsonFormat(pattern="yyyy-MM-dd")
    private Date customer_join_date; 
	
	public Customer() {}
	
	public Customer(String customer_fname, String customer_lname, String customer_mobile, String customer_email) {
		this.customer_fname = customer_fname;
		this.customer_lname = customer_lname;
		this.customer_mobile = customer_mobile;
		this.customer_email = customer_email;
	}
	
	public int getCustomer_id() {
		return customer_id;
	}

	public void setCustomer_id(int customer_id) {
		this.customer_id = customer_id;
	}

	public String getCustomer_fname() {
		return customer_fname;
	}

	public void setCustomer_fname(String customer_fname) {
		this.customer_fname = customer_fname;
	}

	public String getCustomer_lname() {
		return customer_lname;
	}

	public void setCustomer_lname(String customer_lname) {
		this.customer_lname = customer_lname;
	}

	public String getCustomer_mobile() {
		return customer_mobile;
	}

	public void setCustomer_mobile(String customer_mobile) {
		this.customer_mobile = customer_mobile;
	}

	public String getCustomer_email() {
		return customer_email;
	}

	public void setCustomer_email(String customer_email) {
		this.customer_email = customer_email;
	}

	public Date getCustomer_join_date() {
		return customer_join_date;
	}

	public void setCustomer_join_date(Date customer_join_date) {
		this.customer_join_date = customer_join_date;
	}

	@Override
	public String toString() {
		return  customer_id + "|" + customer_fname + "|"+ customer_lname + "|" + customer_mobile + "|" + customer_email+ "|" + customer_join_date;
	}
	
	
	
}
</pre>
<p><b>CustomerDataAccessObject.java</b></p>
<pre>
package com.code4devops.dao;
import java.util.List;
import com.code4devops.entity.Customer;

public interface CustomerDataAccessObject {
	
	public abstract List&lt;Customer&gt; findAll();
	public abstract Customer findById(int customerId);
	public abstract void save(Customer customer);
	public abstract void deleteById(int customerId);
	
}

</pre>
<p><b>CustomerDataAccessObjectImplementation.java</b></p>
<pre>
package com.code4devops.dao;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import com.code4devops.entity.Customer;

@Repository
public class CustomerDataAccessObjectImplementation implements CustomerDataAccessObject{

	@Autowired
	private EntityManager entityManager;
	
	@Override
	public List&lt;Customer&gt; findAll() {
		
		//get the current hibernate session
		Session session=entityManager.unwrap(Session.class);
		
		//create a query
		//table name same as class name here in query it case sensitive
		Query	theQuery=session.createQuery("from Customer", Customer.class);
				
				
		//execute query and get result list
		List&lt;Customer&gt; customerList= theQuery.getResultList();
				
				
		//return the results
		return customerList;
	}

	@Override
	public Customer findById(int customerId) {
		
		//get the current hibernate session
		Session session=entityManager.unwrap(Session.class);
		
		//get the Customer Object by customerId
		Customer customer=session.get(Customer.class, customerId);
													
		//return the results
		return customer;
		
	}

	@Override
	public void save(Customer customer) {
		
		//get the current hibernate session
		Session session=entityManager.unwrap(Session.class);
		
		//Remember One Thing : if id=0 the insert else update
		session.saveOrUpdate(customer);
		
	}

	@Override
	public void deleteById(int customerId) {
		
		//get the current hibernate session
		Session session=entityManager.unwrap(Session.class);
		
		//delete Object with primary key
		Query theQuery = session.createQuery("delete from Customer where customer_id=:customer_id");
				
		theQuery.setParameter("customer_id", customerId);
				
		theQuery.executeUpdate();
		
	}

}

</pre>
<p><b>CustomerService.java</b></p>
<pre>
package com.code4devops.service;
import java.util.List;
import com.code4devops.entity.Customer;

public interface CustomerService {
	
	public abstract List&lt;Customer&gt; findAll();
	public abstract Customer findById(int customerId);
	public abstract void save(Customer Customer);
	public abstract void deleteById(int customerId);
	
}

</pre>
<p><b>CustomerServiceImplementation.java</b></p>
<pre>
package com.code4devops.service;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.code4devops.dao.CustomerDataAccessObject;
import com.code4devops.entity.Customer;

@Service
public class CustomerServiceImplementation implements CustomerService{

	
	@Autowired
	private CustomerDataAccessObject customerDataAccessObject;
	
	@Override
	@Transactional
	public List&lt;Customer&gt; findAll() {
		return customerDataAccessObject.findAll();
	}

	@Override
	@Transactional
	public Customer findById(int customerId) {
		return customerDataAccessObject.findById(customerId);
	}

	@Override
	@Transactional
	public void save(Customer customer) {
		customerDataAccessObject.save(customer);
		
	}

	@Override
	@Transactional
	public void deleteById(int customerId) {
		customerDataAccessObject.deleteById(customerId);
		
	}

	

}

</pre>
<p><b>RestControllerForCustomer.java</b></p>
<pre>
package com.code4devops;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.code4devops.entity.Customer;
import com.code4devops.service.CustomerService;

@RestController
@RequestMapping("customer")
public class RestControllerForCustomer {
	
		@Autowired
		private CustomerService customerService;
		

		//expose "customer/customersave"
		@PostMapping("/customersave")
		public  Customer getEmployeeSave(@RequestBody Customer theCustomer) {
			theCustomer.setCustomer_id(0);
			customerService.save(theCustomer);
			return theCustomer;
		}
			
		//expose "customer/all-customer-list"
		@GetMapping("/all-customer-list")
		public List&lt;Customer&gt; getAllEmployeeList() {
			return customerService.findAll();
			
		}
				
		//expose customer/single-customer-view/{theCustomerId}
		@GetMapping("/single-customer-view/{theCustomerId}")
		public Customer getSingleCustomerView(@PathVariable int theCustomerId) {
			return customerService.findById(theCustomerId);
		}
		
		//expose "customer/delete/1"
		@DeleteMapping("/delete/{theCustomerId}")
		public String getEmployee(@PathVariable int theCustomerId) {
			Customer customer=customerService.findById(theCustomerId);
				if( customer == null) {
					throw new RuntimeException("Employee id not found  :"+ theCustomerId);
				}
				customerService.deleteById(theCustomerId);
				
			return "Delete customer id :" +theCustomerId;	
		}
		
		//expose "customer/update"
		@PutMapping("/update")
		public Customer getEmployeeUpdate(@RequestBody Customer customer) {
			customerService.save(customer);
			return customer;
		}
		
}

</pre>
<p><b>SpringBootRestApiWithHibernateApplication.java</b></p>
<pre>
package com.code4devops;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBootRestApiWithHibernateApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootRestApiWithHibernateApplication.class, args);
	}

}
</pre>